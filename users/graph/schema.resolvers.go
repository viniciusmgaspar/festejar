package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/go-chi/jwtauth/v5"

	"github.com/gasparvini/configs"
	"github.com/gasparvini/graph/model"
	"github.com/gasparvini/internal/entity"
	"gorm.io/gorm"
)

// CreateUserClient is the resolver for the createUserClient field.
func (r *mutationResolver) CreateUserClient(ctx context.Context, input model.NewUserClient) (*model.User, error) {
	u, err := entity.NewUser(input.Name, input.Email, input.Password, input.Phone)
	if err != nil {
		return nil, err
	}
	user, err := r.UserDB.Create(u)
	if err != nil {
		return nil, err
	}
	return &model.User{
		Name:  user.Name,
		Email: user.Email,
		Phone: user.Phone,
	}, nil
}

// UserByEmail is the resolver for the userByEmail field.
func (r *queryResolver) UserByEmail(ctx context.Context, email *string) (*model.User, error) {

	_, claims, err := jwtauth.FromContext(ctx)
	if err != nil {
		return nil, fmt.Errorf("acesso não autorizado: token inválido")
	}

	userID, ok := claims["sub"].(string)
	if !ok {
		return nil, fmt.Errorf("erro ao obter ID do usuário do token")
	}

	user, err := r.UserDB.FindByID(userID)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, fmt.Errorf("usuário com o email %s não foi encontrado", *email)
		} else {
			return nil, err
		}
	}

	convertedUser := &model.User{
		Name:      user.Name,
		Email:     user.Email,
		Phone:     user.Phone,
		Status:    user.Status,
		CreatedAt: &user.CreatedAt,
	}
	return convertedUser, nil
}

// LoginClient is the resolver for the loginClient field.
func (r *queryResolver) LoginClient(ctx context.Context, input model.LoginClientInput) (*model.LoginClientOutput, error) {

	u, err := r.UserDB.FindByEmail(input.Email)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, fmt.Errorf("usuário com o email %s não foi encontrado", input.Email)
		} else {
			return nil, err
		}
	}
	if !u.ValidatePassword(input.Password) {
		return nil, fmt.Errorf("Email/Senha incorreta")
	}

	configs, err := configs.LoadConfig(".")
	if err != nil {
		panic(err)
	}
	_, tokenString, _ := configs.TokenAuth.Encode(map[string]interface{}{
		"sub": u.ID.String(),
		"exp": time.Now().Add(time.Second * time.Duration(configs.JwtExperesIn)).Unix(),
	})
	return &model.LoginClientOutput{
		AccessToken: tokenString,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
